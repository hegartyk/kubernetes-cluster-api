// Copyright 2023 The Infratographer Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by entc, DO NOT EDIT.

package generated

import (
	"time"

	"go.infratographer.com/kubernetes-cluster-api/internal/ent/generated/cluster"
	"go.infratographer.com/kubernetes-cluster-api/internal/ent/schema"
	"go.infratographer.com/x/gidx"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	clusterMixin := schema.Cluster{}.Mixin()
	clusterMixinFields0 := clusterMixin[0].Fields()
	_ = clusterMixinFields0
	clusterFields := schema.Cluster{}.Fields()
	_ = clusterFields
	// clusterDescCreatedAt is the schema descriptor for created_at field.
	clusterDescCreatedAt := clusterMixinFields0[0].Descriptor()
	// cluster.DefaultCreatedAt holds the default value on creation for the created_at field.
	cluster.DefaultCreatedAt = clusterDescCreatedAt.Default.(func() time.Time)
	// clusterDescUpdatedAt is the schema descriptor for updated_at field.
	clusterDescUpdatedAt := clusterMixinFields0[1].Descriptor()
	// cluster.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	cluster.DefaultUpdatedAt = clusterDescUpdatedAt.Default.(func() time.Time)
	// cluster.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	cluster.UpdateDefaultUpdatedAt = clusterDescUpdatedAt.UpdateDefault.(func() time.Time)
	// clusterDescName is the schema descriptor for name field.
	clusterDescName := clusterFields[1].Descriptor()
	// cluster.NameValidator is a validator for the "name" field. It is called by the builders before save.
	cluster.NameValidator = clusterDescName.Validators[0].(func(string) error)
	// clusterDescID is the schema descriptor for id field.
	clusterDescID := clusterFields[0].Descriptor()
	// cluster.DefaultID holds the default value on creation for the id field.
	cluster.DefaultID = clusterDescID.Default.(func() gidx.PrefixedID)
}
